parameters:
    #parameter_name: value
services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

##########################################################################################################

    AppBundle\Repository\:
        resource: '../../src/AppBundle/Repository'

    # ANTISPAM SERVICE :
    AppBundle\Service\TwigExtension\Antispam:
        arguments: ['@mailer','%locale%',50]
    app.antispam: '@AppBundle\Service\TwigExtension\Antispam'
        #alias: AppBundle\Service\TwigExtension\Antispam
    # ANTISPAM TWIG EXTENSION:
    AppBundle\Service\TwigExtension\AntispamExtension:
        arguments: ['@app.antispam']
        tags:
            - { name: twig.extension }




#    app.antispam_extension:
#        alias: AppBundle\Service\TwigExtension\AntispamExtension
#        public: true

    # APPLICATION MAILER
    AppBundle\DoctrineListener\ApplicationMailer:
        arguments:
            - '@mailer'
    app.application_mailer:
        alias: AppBundle\DoctrineListener\ApplicationMailer

    # APPLICATION CREATION LISTENER
    AppBundle\DoctrineListener\ApplicationCreationListener:
        arguments: ['@app.application_mailer']
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    # ANTIFLOOD VALIDATOR
    AppBundle\Validator\AntifloodValidator:
        arguments: ['@request_stack','@doctrine.orm.entity_manager']
        tags:
            - { name: validator.constraint_validator, alias: app.antiflood_validator }

    #BETA HTML ADDER
    #AppBundle\Beta\BetaHTMLAdder:
    app.beta_html_adder:
        alias: AppBundle\Beta\BetaHTMLAdder

    #BETA LISTENER
    AppBundle\Beta\BetaListener:
        arguments: ['@app.beta_html_adder','2020-12-30']
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: processBeta }

    #AUTHENTICATION SUCCESS HANDLER
#    UserBundle\AuthenticationHandler\AuthenticationHandlerListener:
#        arguments: ['@session.flash_bag','@router']
#
#    app.authentication_handler_listener:
#        alias: UserBundle\AuthenticationHandler\AuthenticationHandlerListener

    app.authentication_handler_listener:
        class: UserBundle\AuthenticationHandler\AuthenticationHandlerListener
        arguments: ['@session.flash_bag', '@router']


    #MESSAGE NOTIFICATOR
    AppBundle\Bigbrother\MessageNotificator:
        arguments: ['@mailer']
    app.message_notificator:
        alias: AppBundle\Bigbrother\MessageNotificator

    #MESSAGE LISTENER
    AppBundle\Bigbrother\MessageListener:
        arguments:
            - '@app.message_notificator'
            - ['alexandre','pierre','marine']
        tags:
            - { name: kernel.event_listener, event: app.post_message, method: processMessage }
